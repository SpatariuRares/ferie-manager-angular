@import '../../../../styles/variables';
@import '../../../../styles/mixins';
@import '../../../../styles/themes';
@import '../../../../styles/animations';

// Main container using BEM approach
.profile {
  &__container {
    max-width: 800px;
    margin: 0 auto;
    padding: map-get($spacing, 'lg');
  }

  &__title {
    @include heading-2;
    margin-bottom: map-get($spacing, 'lg');
    color: $primary;

    @include themed() {
      color: t('text');
    }
  }

  &__form {
    width: 100%;
  }

  &__form-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: map-get($spacing, 'md');

    @include media-breakpoint-up('md') {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  &__field {
    width: 100%;
    margin-bottom: map-get($spacing, 'sm');

    &--full-width {
      grid-column: 1 / -1;
    }
  }

  &__checkbox-container {
    @include flex-center;
    min-height: 56px; // Match height of form fields
    padding: 0 map-get($spacing, 'md');
    margin-bottom: map-get($spacing, 'sm');

    mat-checkbox {
      ::ng-deep .mat-checkbox-label {
        font-weight: $font-weight-medium;
      }
    }
  }

  &__date-field {
    .mat-datepicker-toggle {
      color: $primary;

      @include themed() {
        color: t('text-secondary');
      }
    }
  }

  &__metrics {
    margin: map-get($spacing, 'lg') 0;
  }

  &__actions {
    margin-top: map-get($spacing, 'lg');
    @include flex-between;

    @include media-breakpoint-down('sm') {
      flex-direction: column;
      gap: map-get($spacing, 'md');

      button {
        width: 100%;
      }
    }
  }
}

// Metric card component
.metric-card {
  @include card-base;
  text-align: center;
  transition: $transition-base;
  overflow: hidden;

  @include themed() {
    background-color: t('surface');
    box-shadow: 0 2px 8px t('shadow');
  }

  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);

    @include themed() {
      box-shadow: 0 6px 12px t('shadow');
    }
  }

  &__header {
    background-color: $primary;
    color: white;
    padding: map-get($spacing, 'sm') map-get($spacing, 'md');
    text-align: center;
    font-weight: $font-weight-medium;

    @include themed() {
      background-color: var(--primary-color);
    }
  }

  &__content {
    padding: map-get($spacing, 'md');
    @include flex-column;
    align-items: center;
    justify-content: center;
  }

  &__value {
    font-size: $font-size-xxl;
    font-weight: $font-weight-bold;
    margin-bottom: map-get($spacing, 'xs');
    color: $primary;

    @include themed() {
      color: var(--primary-color);
    }
  }

  &__subtitle {
    font-size: $font-size-base;
    color: rgba($color-text, 0.6);
    margin-top: map-get($spacing, 'xs');

    @include themed() {
      color: t('text-secondary');
    }
  }
}

// Form field styles
.form-hint {
  display: flex;
  justify-content: space-between;
  font-size: $font-size-sm;
  margin-top: map-get($spacing, 'xs');

  &__text {
    color: rgba($color-text, 0.6);

    @include themed() {
      color: t('text-secondary');
    }
  }

  &__error {
    color: $warn;
  }
}

// Button styles
.btn {
  &--primary {
    background-color: $primary;
    color: white;
    border: none;
    padding: map-get($spacing, 'sm') map-get($spacing, 'lg');
    border-radius: 4px;
    font-weight: $font-weight-medium;
    cursor: pointer;
    transition: $transition-base;

    &:hover {
      background-color: darken($primary, 10%);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }

    &:disabled {
      background-color: rgba($color-text, 0.2);
      cursor: not-allowed;
    }

    @include themed() {
      background-color: var(--primary-color);

      &:hover {
        background-color: darken(t('primary'), 10%);
      }

      &:disabled {
        background-color: rgba(t('text'), 0.2);
      }
    }
  }

  &--secondary {
    background-color: transparent;
    color: $primary;
    border: 1px solid $primary;
    padding: map-get($spacing, 'sm') map-get($spacing, 'lg');
    border-radius: 4px;
    font-weight: $font-weight-medium;
    cursor: pointer;
    transition: $transition-base;

    &:hover {
      background-color: rgba($primary, 0.1);
    }

    @include themed() {
      color: var(--primary-color);
      border-color: var(--primary-color);

      &:hover {
        background-color: rgba(t('primary'), 0.1);
      }
    }
  }
}

// Material overrides
::ng-deep {
  .mat-form-field-appearance-outline .mat-form-field-outline {
    color: $color-border;

    @include themed() {
      color: t('border');
    }
  }

  .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick {
    color: $primary;

    @include themed() {
      color: var(--primary-color);
    }
  }

  .mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick {
    color: $warn;
  }

  .mat-form-field-label {
    color: rgba($color-text, 0.6);

    @include themed() {
      color: t('text-secondary');
    }
  }

  .mat-select-value, .mat-input-element {
    color: $color-text;

    @include themed() {
      color: t('text');
    }
  }

  .mat-form-field-subscript-wrapper {
    font-size: $font-size-sm;
  }
}

// Animation classes
.fade-in {
  @include animate(fadeIn, 0.5s);
}

.slide-in-up {
  @include animate(slideInBottom, 0.5s);
}